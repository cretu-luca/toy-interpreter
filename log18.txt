
---------- Program State <1>----------

=== Execution Stack ===
( ( Ref(int) v1; int cnt); ( new(v1, 1); ( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Model.Statement.createSemaphoreStatement@313e5fda; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Model.Statement.createSemaphoreStatement@313e5fda
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Model.Statement.createSemaphoreStatement@313e5fda
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c)))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c)))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))); ( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba))))
( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba))))
( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); Model.Statement.releaseCountSemaphoreStatement@4539779f)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@63179b5c))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); Model.Statement.releaseCountSemaphoreStatement@5e32b7ba)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( ( Ref(int) v1; int cnt); ( new(v1, 1); ( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Model.Statement.createSemaphoreStatement@34b61a44; ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Model.Statement.createSemaphoreStatement@34b61a44
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( ( Ref(int) v1; int cnt); ( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
create(cnt)
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
create(cnt)
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( ( Ref(int) v1; int cnt); ( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
create(cnt)
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
create(cnt)
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( ( Ref(int) v1; int cnt); ( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
create(cnt)
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
create(cnt)
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( ( Ref(int) v1; int cnt); ( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
create(cnt)
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
create(cnt)
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
writeHeap(v1, readHeap(v1) * 10)
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
writeHeap(v1, readHeap(v1) * 10)
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
print(readHeap(v1))
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
print(readHeap(v1))
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( ( Ref(int) v1; int cnt); ( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( Ref(int) v1; int cnt)
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
Ref(int) v1
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
Empty symbol table

====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
int cnt
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( new(v1, 1); ( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
new(v1, 1)
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (0, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
Empty symbol table

======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( create(cnt); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
create(cnt)
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
create(cnt)
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 0
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))); ( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))); ( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
fork( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( acquire(cnt); ( print(readHeap(v1) - 1); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( writeHeap(v1, readHeap(v1) * 10); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( acquire(cnt); ( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
writeHeap(v1, readHeap(v1) * 10)
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
writeHeap(v1, readHeap(v1) * 10)
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 1


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
print(readHeap(v1))
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
print(readHeap(v1))
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
Empty output
-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
acquire(cnt)
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
( print(readHeap(v1) - 1); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
print(readHeap(v1) - 1)
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
print(readHeap(v1) - 1)
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
acquire(cnt)
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( writeHeap(v1, readHeap(v1) * 10); ( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt))))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
writeHeap(v1, readHeap(v1) * 10)
( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
writeHeap(v1, readHeap(v1) * 10)
( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 10


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( writeHeap(v1, readHeap(v1) * 2); ( print(readHeap(v1)); release(cnt)))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
writeHeap(v1, readHeap(v1) * 2)
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
writeHeap(v1, readHeap(v1) * 2)
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 100


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
( print(readHeap(v1)); release(cnt))


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
print(readHeap(v1))
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
print(readHeap(v1))
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===
release(cnt)


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <1>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <2>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------


---------- Program State <3>----------

=== Execution Stack ===


===== Symbol Table ====
cnt --> 1
v1 --> (1, int)


====== File Table =====
Empty symbol table

====== Heap Table =====
1 --> 200


======== Output =======
10
9
200

-----------------------------------

